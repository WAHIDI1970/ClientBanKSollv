import streamlit as st
import joblib
import numpy as np

# ‚è≥ Chargement des mod√®les
@st.cache_resource
def charger_modeles():
    modele_logistique = joblib.load("models/logistic_model.pkl")
    scaler = joblib.load("models/scaler.pkl")
    return modele_logistique, scaler

# Interface principale
def main():
    st.set_page_config(page_title="Scoring Bancaire", layout="centered")
    st.title("üîç Pr√©diction de la Solvabilit√© Bancaire")
    st.markdown("Entrez les caract√©ristiques du client pour pr√©dire sa solvabilit√©.")

    # Champs √† remplir (correspondant aux features du mod√®le)
    age = st.slider("√Çge", 18, 90, 30)
    marital = st.selectbox("Statut matrimonial", options=[0, 1])  # Adapter selon codage (0 = c√©libataire, 1 = mari√© ?)
    expenses = st.number_input("D√©penses mensuelles", min_value=0.0, value=500.0)
    income = st.number_input("Revenu mensuel", min_value=0.0, value=2500.0)
    amount = st.number_input("Montant du cr√©dit", min_value=0.0, value=5000.0)
    price = st.number_input("Prix total du bien", min_value=0.0, value=15000.0)

    # Charger mod√®le
    model, scaler = charger_modeles()

    if st.button("üîÆ Pr√©dire"):
        # Pr√©paration des donn√©es
        input_data = np.array([[age, marital, expenses, income, amount, price]])
        input_scaled = scaler.transform(input_data)

        # Pr√©diction
        prediction = model.predict(input_scaled)[0]

        # Affichage du r√©sultat
        if prediction == 0:
            st.success("‚úÖ Client **Solvable**")
        else:
            st.error("‚ùå Client **Non solvable**")

if __name__ == "__main__":
    main()




