# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fwWylQLh1fHxIJsrx07p6960asPSlegK
"""

import streamlit as st
import pandas as pd
import joblib
import io

# Titre de l'application
st.set_page_config(page_title="Pr√©diction Solvabilit√© Client", layout="centered")
st.title("üîç Pr√©diction du Statut de Solvabilit√© d‚Äôun Client")

st.markdown("""
Cette application pr√©dit si un client est **solvable** ou **non solvable** √† partir de ses informations financi√®res.
""")

# Chargement des mod√®les
try:
    model = joblib.load("models/logistic_model.pkl")
    scaler = joblib.load("models/scaler.pkl")
except FileNotFoundError:
    st.error("‚ùå Mod√®les non trouv√©s. Assurez-vous que les fichiers 'logistic_model.pkl' et 'scaler.pkl' existent dans le dossier 'models/'.")
    st.stop()

# Sidebar - Entr√©e utilisateur
st.sidebar.header("üßæ Informations du client")
age = st.sidebar.number_input("√Çge", min_value=18, max_value=100, value=30)
marital = st.sidebar.selectbox("Statut marital", options=[1, 2, 3], format_func=lambda x: {1: "C√©libataire", 2: "Mari√©", 3: "Divorc√©"}[x])
expenses = st.sidebar.number_input("D√©penses mensuelles", min_value=0.0, max_value=1000.0, value=200.0)
income = st.sidebar.number_input("Revenu mensuel", min_value=0.0, max_value=2000.0, value=800.0)
amount = st.sidebar.number_input("Montant du cr√©dit demand√©", min_value=0.0, max_value=10000.0, value=1000.0)
price = st.sidebar.number_input("Valeur de l‚Äôachat", min_value=0.0, max_value=15000.0, value=1200.0)

# Pr√©paration des donn√©es
user_data = pd.DataFrame({
    "Age": [age],
    "Marital": [marital],
    "Expenses": [expenses],
    "Income": [income],
    "Amount": [amount],
    "Price": [price]
})

# Affichage des donn√©es saisies
st.subheader("üìã Donn√©es saisies")
st.write(user_data)

# Bouton de pr√©diction
if st.sidebar.button("‚öôÔ∏è Pr√©dire"):
    try:
        user_scaled = scaler.transform(user_data)
        prediction = model.predict(user_scaled)
        proba = model.predict_proba(user_scaled)[:, 1]

        if prediction[0] == 1:
            st.error(f"üî¥ Le client est **non solvable** avec une probabilit√© de {proba[0]:.1%}.")
        else:
            st.success(f"üü¢ Le client est **solvable** avec une probabilit√© de {1 - proba[0]:.1%}.")

        # T√©l√©chargement CSV
        result_df = user_data.copy()
        result_df['Statut Pr√©dit'] = ['Non solvable' if prediction[0] == 1 else 'Solvable']
        result_df['Probabilit√© (Non Solvable)'] = [f"{proba[0]:.1%}"]

        csv = result_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• T√©l√©charger les r√©sultats en CSV",
            data=csv,
            file_name="prediction_client.csv",
            mime='text/csv'
        )

    except Exception as e:
        st.error(f"‚ùå Une erreur est survenue : {e}")