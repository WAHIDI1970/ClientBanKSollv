# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import joblib

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction Solvabilit√© Client", 
    layout="centered",
    page_icon="üîç"
)

# Titre et description
st.title("üîç Pr√©diction du Statut de Solvabilit√© d'un Client")
st.markdown("""
Cette application pr√©dit si un client est **solvable** ou **non solvable** √† partir de ses informations financi√®res.
""")

# Chargement des mod√®les avec cache pour am√©liorer les performances
@st.cache_resource
def load_models():
    try:
        model = joblib.load("models/logistic_model.pkl")
        scaler = joblib.load("models/scaler.pkl")
        return model, scaler
    except FileNotFoundError:
        st.error("‚ùå Mod√®les non trouv√©s. Assurez-vous que les fichiers 'logistic_model.pkl' et 'scaler.pkl' existent dans le dossier 'models/'.")
        st.stop()

model, scaler = load_models()

# Sidebar - Entr√©e utilisateur
st.sidebar.header("üßæ Informations du client")

# Dictionnaire pour les labels du statut marital
marital_labels = {
    1: "C√©libataire", 
    2: "Mari√©(e)", 
    3: "Divorc√©(e)"
}

age = st.sidebar.number_input("√Çge", min_value=18, max_value=100, value=30)
marital = st.sidebar.selectbox(
    "Statut marital", 
    options=list(marital_labels.keys()), 
    format_func=lambda x: marital_labels[x]
)
expenses = st.sidebar.number_input("D√©penses mensuelles (‚Ç¨)", min_value=0.0, max_value=10000.0, value=200.0, step=50.0)
income = st.sidebar.number_input("Revenu mensuel (‚Ç¨)", min_value=0.0, max_value=50000.0, value=800.0, step=50.0)
amount = st.sidebar.number_input("Montant du cr√©dit demand√© (‚Ç¨)", min_value=0.0, max_value=100000.0, value=1000.0, step=100.0)
price = st.sidebar.number_input("Valeur de l'achat (‚Ç¨)", min_value=0.0, max_value=150000.0, value=1200.0, step=100.0)

# Validation des donn√©es
if income <= expenses:
    st.sidebar.warning("‚ö†Ô∏è Le revenu doit √™tre sup√©rieur aux d√©penses.")

# Pr√©paration des donn√©es
user_data = pd.DataFrame({
    "Age": [age],
    "Marital": [marital],
    "Expenses": [expenses],
    "Income": [income],
    "Amount": [amount],
    "Price": [price]
})

# Affichage des donn√©es saisies
st.subheader("üìã Donn√©es client")
st.dataframe(
    user_data.rename(columns={
        "Marital": "Statut marital",
        "Expenses": "D√©penses (‚Ç¨)",
        "Income": "Revenu (‚Ç¨)",
        "Amount": "Montant cr√©dit (‚Ç¨)",
        "Price": "Valeur achat (‚Ç¨)"
    }).style.format({
        "D√©penses (‚Ç¨)": "{:.2f}",
        "Revenu (‚Ç¨)": "{:.2f}",
        "Montant cr√©dit (‚Ç¨)": "{:.2f}",
        "Valeur achat (‚Ç¨)": "{:.2f}"
    })
)

# Bouton de pr√©diction
if st.sidebar.button("‚öôÔ∏è Pr√©dire", type="primary"):
    with st.spinner("Analyse en cours..."):
        try:
            # Transformation et pr√©diction
            user_scaled = scaler.transform(user_data)
            prediction = model.predict(user_scaled)
            proba = model.predict_proba(user_scaled)[:, 1]
            
            # Affichage des r√©sultats
            if prediction[0] == 1:
                st.error(f"üî¥ **Non solvable** (probabilit√©: {proba[0]:.1%})")
                st.progress(proba[0])
            else:
                st.success(f"üü¢ **Solvable** (probabilit√©: {1-proba[0]:.1%})")
                st.progress(1 - proba[0])
            
            # T√©l√©chargement CSV
            result_df = user_data.copy()
            result_df['Statut Pr√©dit'] = ['Non solvable' if prediction[0] == 1 else 'Solvable']
            result_df['Probabilit√© (Non Solvable)'] = [f"{proba[0]:.1%}"]
            
            csv = result_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Exporter les r√©sultats (CSV)",
                data=csv,
                file_name="prediction_client.csv",
                mime='text/csv',
                help="T√©l√©charger toutes les informations au format CSV"
            )
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction: {str(e)}")
            st.exception(e)

# Note informative
st.caption("‚ÑπÔ∏è Les pr√©dictions sont bas√©es sur un mod√®le statistique et doivent √™tre interpr√©t√©es avec prudence.")

