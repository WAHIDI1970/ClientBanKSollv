# Fichier : App/app.py

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import pyreadstat

# -----------------------
# üì¶ Chargement des mod√®les
# -----------------------
@st.cache_resource
def charger_modeles():
    logistic = joblib.load("models/logistic_model.pkl")
    knn = joblib.load("models/knn_model.pkl")  # Mod√®le KNN entra√Æn√©, pas la classe compl√®te
    scaler = joblib.load("models/scaler.pkl")
    return logistic, knn, scaler

# -----------------------
# üìö Chargement de scoring.sav
# -----------------------
@st.cache_data
def charger_base():
    df, meta = pyreadstat.read_sav("Data/scoring.sav")
    return df

# -----------------------
# üöÄ Application principale
# -----------------------
def main():
    st.set_page_config(page_title="üß† Pr√©diction de Solvabilit√©", layout="centered")
    st.title("üí≥ Application de Scoring Bancaire")
    st.markdown("Saisissez les donn√©es d'un client pour pr√©dire sa **solvabilit√©** √† l‚Äôaide de deux mod√®les.")

    # Chargement des mod√®les & donn√©es
    logistic_model, knn_model, scaler = charger_modeles()
    df = charger_base()

    # D√©tecter les modalit√©s de 'Marital'
    marital_options = sorted(df['Marital'].dropna().unique().tolist())
    marital_mapping = {val: idx for idx, val in enumerate(marital_options)}

    # Interface utilisateur
    st.subheader("üìù Saisie des caract√©ristiques du client")

    age = st.slider("√Çge", min_value=18, max_value=100, value=30)
    marital = st.selectbox("Statut marital", marital_options)
    expenses = st.number_input("D√©penses mensuelles (‚Ç¨)", min_value=0, max_value=20000, value=1000)
    income = st.number_input("Revenu mensuel (‚Ç¨)", min_value=0, max_value=50000, value=3000)
    amount = st.number_input("Montant emprunt√© (‚Ç¨)", min_value=0, max_value=100000, value=10000)
    price = st.number_input("Prix de l'achat (‚Ç¨)", min_value=0, max_value=150000, value=12000)

    if st.button("üìä Pr√©dire la solvabilit√©"):
        # Pr√©paration des donn√©es
        donnees_client = pd.DataFrame([{
            "Age": age,
            "Marital": marital_mapping[marital],
            "Expenses": expenses,
            "Income": income,
            "Amount": amount,
            "Price": price
        }])

        # Mise √† l'√©chelle
        donnees_scaled = scaler.transform(donnees_client)

        # Pr√©diction Logistique
        pred_log = logistic_model.predict(donnees_scaled)[0]

        # Pr√©diction KNN
        pred_knn = knn_model.predict(donnees_scaled)[0]

        # R√©sultats
        st.subheader("üîé R√©sultat de la pr√©diction")

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### Mod√®le Logistique")
            if pred_log == 1:
                st.error("‚ùå Client non solvable")
            else:
                st.success("‚úÖ Client solvable")

        with col2:
            st.markdown("### Mod√®le KNN")
            if pred_knn == 1:
                st.error("‚ùå Client non solvable")
            else:
                st.success("‚úÖ Client solvable")

if __name__ == '__main__':
    main()



