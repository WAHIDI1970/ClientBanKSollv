import streamlit as st
import numpy as np
import joblib

# Import de la classe personnalis√©e
from modele_knn import ModeleKNNOptimise

# -------------------------------
# Chargement du mod√®le
# -------------------------------
@st.cache_resource
def load_model():
    try:
        model = joblib.load("models/ModeleKNNOptimise.pkl")
        return model
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {e}")
        return None

# -------------------------------
# Interface Utilisateur
# -------------------------------
def main():
    st.set_page_config(page_title="Scoring Client", layout="centered")
    st.title("üìä Application de Scoring Bancaire")
    st.write("Remplissez les informations du client pour pr√©dire sa solvabilit√©.")

    # Exemple de champs √† adapter √† tes vraies variables
    age = st.slider("√Çge", 18, 70, 30)
    revenu = st.number_input("Revenu mensuel (‚Ç¨)", min_value=0, value=2500)
    montant_credit = st.number_input("Montant du cr√©dit demand√© (‚Ç¨)", min_value=0, value=10000)
    duree_credit = st.slider("Dur√©e du cr√©dit (mois)", 6, 60, 24)
    nombre_enfants = st.slider("Nombre d‚Äôenfants √† charge", 0, 5, 0)

    # Transformer en array numpy pour pr√©diction
    input_data = np.array([[age, revenu, montant_credit, duree_credit, nombre_enfants]])

    # Bouton pour pr√©dire
    if st.button("Pr√©dire le statut du client"):
        model = load_model()
        if model:
            prediction = model.predict(input_data)[0]
            proba = model.predict_proba(input_data)[0][1]  # proba d'√™tre non solvable

            if prediction == 1:
                st.error(f"‚ùå Le client est pr√©dit **non solvable**. (Risque: {proba:.2%})")
            else:
                st.success(f"‚úÖ Le client est pr√©dit **solvable**. (Risque: {proba:.2%})")

# -------------------------------
if __name__ == "__main__":
    main()


